@startuml
title クラス図

class GameController {
    - string winnerCondition
    - string userId
    - string userName
    - void checkWinner()
    - bool isMyTurn()
    + void surrender()
    + void endMyTurn()
    + void deployCharacter()
}

class TurnController {
    - number count
    + number currentTurn
    + void startTimer()
    + void stopTimer()
    + void resetTimer()
    + void changeTurn()
}

class CharacterController {
    + void deploy()
    + void onSelectCharacter()
    + void move()
    + void attack()
    + void useMagic()
    + void useItem()
    + void createCharacter()
    + void destoryCharacter()
}

class Field {
    - {x: number, y: number}[] map
    + void displayInteractableArea(placableArea: { x: number, y:number }[])
    + Cell getCellObject(latLng: {x: number, y:number })
}

class Cell {
    - cellType type
    - Character applySpecialEffect(character: Character)
}

class Character {
    - { x: number, y: number } latLng: 現在位置
    - skillName[] skills
    - conditionType[] condition

    - number calcDefense()
    - number calcSpeed()
    + bool isActionEnd()
    + bool isCharacterAlive()
    + bool isCharacterControllable()
    + void takeDamage(damage: number)
    + number calcDamage()
    + number calcmoveNum()
}

class ParameterManager {
    - number level
    - number exp
    - number hp
    - number attack
    - number defence
    - number move
    - number speed
    - number magicAttack
    - number magicDefence

    + void levelUp()
    + object getParameters()
}

class EquipmentsManager {
    - string weapon
    - string sheild
    - string armor
    - string[] acccessories

    + void equipWeapon(weaponName: string)
    + void unequipWeapon()
    + void equipSheild(shieldName: string)
    + void unequipSheild()
    + void equipArmor(armorName: string)
    + void unequipArmor()
    + void equipAccessories(accessoryName: string)
    + void unequipAccessories(accessoryName: string)
    + string[] getSkills()
}

class SkillController {
    
}

enum conditionType {
    poison,
    stun,
    sleep,
    etc,
}

enum cellType {
    mountain,
    river,
    forest,
    house,
    grass,
}

enum skillName {
    sequencialAttack,
    undead,
    etc,
}

enum itemName {
    portion,
    etc,
}

note bottom of SkillController : スキルの使用結果をCharacterControllerに返す

GameController "1" <.. "1" TurnController

GameController -- CharacterController

CharacterController "1" *-- "1..*" Character

CharacterController "1" -- "1" SkillController

CharacterController "1" -le- "1" Field

Character "1" <.. "1" ParameterManager

Character "1" <.. "1" EquipmentsManager

ParameterManager "1" <.. "1" EquipmentsManager

Field "1" o-- "1..*" Cell



@enduml